[10:31 p. m., 22/3/2024] Miguel: ;Lab_1 Juan Rodriguez/201920171; Miguel Garces/202013995
;Perifericos exteriores
; Definición de registros y direcciones de memoria para los periféricos
RCC_AHB4ENR		EQU		0X58024540  		; Habilitamos relojes para los puertos 
GPIOB_MODER		EQU 	0X58020400 			; Registro de modo del GPIOB
GPIOB_ODR 		EQU     0X58020414  		; Registro de datos de salida del GPIOB
GPIOC_MODER		EQU 	0X58020800 			; Registro de modo del GPIOB
GPIOC_IDR 		EQU     0X58020810 			; Registro de datos de salida del GPIOB

	
; Definición de la sección de código como solo lectura y alineación de 2 bytes
			AREA |.Text|, CODE, READONLY, ALIGN = 2

			; Punto de entrada del programa
			ENTRY
			EXPORT __main

__main  
    
			LDR     R0, = RCC_AHB4ENR   		; Cargar la dirección de RCC_AHB4ENR en R0
			LDR     R1, [R0]            		; Cargar el contenido de RCC_AHB4ENR en R1

    
			ORR     R1, #0X0006         		; Habilitar los relojes para GPIOB (bit 1) y GPIOC (bit 2) mediante la operación OR
			STR     R1, [R0]             		; Almacenar el nuevo valor en RCC_AHB4ENR
    
    ; Configurar GPIOB (PB0 y PB14) como salidas
			LDR     R0, = GPIOB_MODER   
			MOVW    R1, #0x0000
			MOVT    R1, #0x1000			
			STR     R1, [R0]             
    
    ; Configurar GPIOC como entrada
			LDR     R0, = GPIOC_MODER   
			MOVW    R1, #0x00000000     
			STR     R1, [R0]            
    
			LDR     R10, = GPIOB_ODR    		; Obtener la dirección base del registro ODR de GPIOB

LOOP
			LDR     R1, =GPIOC_IDR      		; Leer el estado del pin 13 (bit 13) de GPIOC
			LDR     R2, [R1]            
    ; Verificar si el botón está presionado mediante el debounce
			AND     R3, R2, #0x2000      
			CMP     R3, #0x2000         
			BEQ     DEBOUNCE            
    
			B       LOOP                 		; Si no está presionado, continuar en el bucle

DEBOUNCE
    ; Esperar un breve período de tiempo para el debounce
			MOV     R3,#10
			BL      DELAY_MS 
    
    ; Leer nuevamente el estado del pin 13 de GPIOC
			LDR     R2, [R1]            
			AND     R3, R2, #0x2000      
			CMP     R3, #0x000         
    ; Si sigue sin estar presionado, ir al contador
			BEQ     CONTADOR 
    ; Si sigue presionado, repetir el debounce
			B       DEBOUNCE
            
CONTADOR  
    ; Incrementar el contador
			ADD     R12, R12,#0X001
			CMP     R12, #0X003					; Verificar el valor del contador comparando
			BEQ     ENCENDER_LED				; Si es igual salte a la funcion ENCENDER_LED
			CMP     R12, #0X005					; Verificar el valor del contador
			BEQ     APAGAR_LED					; Saltar a la funcion APAGAR_LED
			B       LOOP						; Si el contador no llega a los valores especificados, volver al bucle principal

ENCENDER_LED
			MOV     R0, #0X4000     			; Encender el LED en PB14
			STR     R0, [R10]           
			B       LOOP						; Volver al bucle principal

APAGAR_LED
			MOV     R0, #0X00000000     		; Apagar el LED en PB14
			STR     R0, [R10]           
			MOV     R12, #0X0					; Reiniciar el contador
			B       LOOP						; Volver al bucle principal
; Función de retardo
DELAY_MS
DELAY_02
			MOV     R4, #0x3E80      ; Inicializar el contador de retardo con el valor 0x3E80 (16000 en decimal)

DELAY_01    
			SUB     R4, #0x01        ; Decrementar el contador de retardo en 1
			CMP     R4, #0x00        ; Comparar el contador con 0
			BNE     DELAY_01         ; Si el contador no es igual a 0, repetir el bucle de retardo
			SUB     R3, #0x01        ; Decrementar el contador de tiempo en 1
			CMP     R3, #0x00        ; Comparar el contador de tiempo con 0
			BNE     DELAY_02         ; Si el contador de tiempo no es igual a 0, volver al inicio del retardo
			BX      LR               ; Salir de la función de retardo


			ALIGN
			END
[10:41 p. m., 22/3/2024] Miguel: ;Lab_1 Juan Rodriguez/201920171; Miguel Garces/202013995
;PERIFERICOS EXTERIORES

RCC_AHB4ENR		EQU		0X58024540  ; Dirección de memoria del registro RCC_AHB4ENR, que controla la habilitación de los relojes de los periféricos
GPIOB_MODER		EQU 	0X58020400  ; Dirección de memoria del registro GPIOB_MODER, que controla el modo de los pines del puerto GPIOB
GPIOB_ODR 		EQU     0X58020414  ; Dirección de memoria del registro GPIOB_ODR, que controla los datos de salida de los pines del puerto GPIOB
GPIOC_MODER		EQU 	0X58020800  ; Dirección de memoria del registro GPIOC_MODER, que controla el modo de los pines del puerto GPIOC
GPIOC_IDR 		EQU     0X58020810  ; Dirección de memoria del registro GPIOC_IDR, que lee el estado de los pines del puerto GPIOC
GPIOE_MODER		EQU 	0X58021000  ; Dirección de memoria del registro GPIOE_MODER, que controla el modo de los pines del puerto GPIOE
GPIOE_ODR 		EQU     0X58021014  ; Dirección de memoria del registro GPIOE_ODR, que controla los datos de salida de los pines del puerto GPIOE
	
	
            AREA |.Text|, CODE, READONLY, ALIGN = 2
			ENTRY
			EXPORT __main
					
__main  	LDR		R0, = RCC_AHB4ENR				; Activa el reloj para el bus AHB4    
			LDR 	R1, [R0]            
			ORR		R1, #0X00016					; Activa los puertos B, C y E         
			STR     R1, [R0]    
			
			LDR     R0, = GPIOB_MODER				; Configura los pines PB3, PB4, PB5, PB8, PB12, PB13 Y PB15 como salidas para el display_1
			MOVW 	R1, #0x0540
			MOVT 	R1, #0x4501			
			STR		R1, [R0] 
			
			LDR     R0, = GPIOE_MODER				;Configura los pines  PE6, PE10, PE11, PE12, PE13, PE14 Y PE15 como salidas para el display_2  
			MOVW 	R1, #0x1000
			MOVT 	R1, #0x5550			
			STR		R1, [R0] 
			
			LDR     R0, = GPIOC_MODER				; cConfigura el pin PC13 del pulsador como entrada   
			MOVW 	R1, #0x00000000     
			STR		R1, [R0]        
			
			LDR     R9,  = GPIOB_ODR				; Asigna el registro R9 al puerto GPIOB    
			LDR     R10, = GPIOE_ODR				; Asigna el registro R10 al puerto GPIOE  
			
			MOV     R0, #0X10						;Inicializa el display_1 de las decenas en 0.     
			STR     R0, [R9]
			MOV     R6, #0X8000						;Inicializa el display_2 de las unidades en 0.      
			STR     R6, [R10]
LOOP

			LDR     R1, =GPIOC_IDR					; Ciclo para verificar si el pulsador esta siendo presionado.      
			LDR     R2, [R1] 
			STR     R6, [R10]  
			STR     R0, [R9]			
			AND     R3, R2, #0x2000      
			CMP     R3, #0x2000 
			BEQ 	CHECK_LONG_PRESS
						
			;BEQ     DEBOUNCE   
			B       LOOP                 
;DEBOUNCE; Funcion BEBOUNCE para cancelar el ruido producido por los rebotes en el pulsador.
			;MOV  	R3,#5   ; 2000 iteraciones es aproximadamente 2 segundos
			;MOV     R5,#2000
			;BL   	DELAY_MS
			;LDR     R2, [R1]  ; Verifica el estado del pulsador
			;AND     R3, R2, #0x2000      
			;CMP     R3, #0x0000      
			;BEQ    	CONTADOR
			;B       DEBOUNCE
			
CHECK_LONG_PRESS
			MOV  	R3,#2000   						; 2000 iteraciones es aproximadamente 2 segundos
			BL   	DELAY_MS		
			LDR     R2, [R1]  						; Verifica el estado del pulsador
			AND     R3, R2, #0x2000      
			CMP     R3, #0x2000         
			BEQ     RESTART_COUNTER  				; Si el pulsador sigue presionado, reinicia el contador
			BNE    	CONTADOR
			B       LOOP	
			
RESTART_COUNTER
			MOV     R0, #0X10						;Inicializa el display_1 de las decenas en 0.     
			STR     R0, [R9]
			MOV     R6, #0X8000						;Inicializa el display_2 de las unidades en 0.      
			STR     R6, [R10] 
			MOV		R12, #-1
			MOV		R8, #-1
			B       LOOP
			
CONTADOR    ; Contador que compara el numero de pulsaciones   	
            ADD     R12, R12,#1     ; Incrementa el contador de pulsaciones
            ADD     R8, R8,#1       ; Incrementa el contador temporal
            CMP     R8, #1          ; Compara el contador temporal con 1
            BEQ     UNO_2           ; Si es igual a 1, carga el valor correspondiente para el display 2
            CMP     R8, #2          ; Compara el contador temporal con 2
            BEQ     DOS_2           ; Si es igual a 2, carga el valor correspondiente para el display 2
            CMP     R8, #3          ; Compara el contador temporal con 3
            BEQ     TRES_2          ; Si es igual a 3, carga el valor correspondiente para el display 2
            CMP     R8, #4          ; Compara el contador temporal con 4
            BEQ     CUATRO_2        ; Si es igual a 4, carga el valor correspondiente para el display 2
            CMP     R8, #5          ; Compara el contador temporal con 5
            BEQ     CINCO_2         ; Si es igual a 5, carga el valor correspondiente para el display 2
            CMP     R8, #6          ; Compara el contador temporal con 6
            BEQ     SEIS_2          ; Si es igual a 6, carga el valor correspondiente para el display 2
            CMP     R8, #7          ; Compara el contador temporal con 7
            BEQ     SIETE_2         ; Si es igual a 7, carga el valor correspondiente para el display 2
            CMP     R8, #8          ; Compara el contador temporal con 8
            BEQ     OCHO_2          ; Si es igual a 8, carga el valor correspondiente para el display 2
            CMP     R8, #9          ; Compara el contador temporal con 9
            BEQ     NUEVE_2         ; Si es igual a 9, carga el valor correspondiente para el display 2
            CMP     R12, #10        ; Compara el contador de pulsaciones con 10
            BEQ     UNO_1           ; Si es igual a 10, carga el valor correspondiente para el display 1
            CMP     R12, #20        ; Compara el contador de pulsaciones con 20
            BEQ     DOS_1           ; Si es igual a 20, carga el valor correspondiente para el display 1
            CMP     R12, #30        ; Compara el contador de pulsaciones con 30
            BEQ     TRES_1          ; Si es igual a 30, carga el valor correspondiente para el display 1
            CMP     R12, #40        ; Compara el contador de pulsaciones con 40
            BEQ     CUATRO_1        ; Si es igual a 40, carga el valor correspondiente para el display 1
            CMP     R12, #50        ; Compara el contador de pulsaciones con 50
            BEQ     CINCO_1         ; Si es igual a 50, carga el valor correspondiente para el display 1
            CMP     R12, #60        ; Compara el contador de pulsaciones con 60
            BEQ     SEIS_1          ; Si es igual a 60, carga el valor correspondiente para el display 1
            CMP     R12, #70        ; Compara el contador de pulsaciones con 70
            BEQ     SIETE_1         ; Si es igual a 70, carga el valor correspondiente para el display 1
            CMP     R12, #80        ; Compara el contador de pulsaciones con 80
            BEQ     OCHO_1          ; Si es igual a 80, carga el valor correspondiente para el display 1
            CMP     R12, #90        ; Compara el contador de pulsaciones con 90
            BEQ     NUEVE_1         ; Si es igual a 90, carga el valor correspondiente para el display 1
            B       LOOP            ; Vuelve al bucle principal

			
CERO_2      ; Carga el valor 0 en el display 2
            MOV     R6, #0X8000
            B       LOOP            ; Vuelve al bucle principal
UNO_2       ; Carga el valor 1 en el display 2
            MOV     R6, #0X9C40
            B       LOOP            ; Vuelve al bucle principal

DOS_2       ; Carga el valor 2 en el display 2
            MOV     R6, #0X2040
            B       LOOP            ; Vuelve al bucle principal

TRES_2      ; Carga el valor 3 en el display 2
            MOV     R6, #0X1040
            B       LOOP            ; Vuelve al bucle principal

CUATRO_2    ; Carga el valor 4 en el display 2
            MOV     R6, #0X1C00
            B       LOOP            ; Vuelve al bucle principal

CINCO_2     ; Carga el valor 5 en el display 2
            MOV     R6, #0X5000
            B       LOOP            ; Vuelve al bucle principal

SEIS_2      ; Carga el valor 6 en el display 2
            MOV     R6, #0X4000
            B       LOOP            ; Vuelve al bucle principal

SIETE_2     ; Carga el valor 7 en el display 2
            MOV     R6, #0X9440
            B       LOOP            ; Vuelve al bucle principal

OCHO_2      ; Carga el valor 8 en el display 2
            MOV     R6, #0X000
            B       LOOP            ; Vuelve al bucle principal

NUEVE_2     ; Carga el valor 9 en el display 2
            MOV     R6, #0X1000
            B       LOOP            ; Vuelve al bucle principal

UNO_1       ; Carga el valor 1 en el display 1
            MOV     R0, #0X1138
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

DOS_1       ; Carga el valor 2 en el display 1
            MOV     R0, #0X2008
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

TRES_1      ; Carga el valor 3 en el display 1
            MOV     R0, #0X28
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

CUATRO_1    ; Carga el valor 4 en el display 1
            MOV     R0, #0X1120
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

CINCO_1     ; Carga el valor 5 en el display 1
            MOV     R0, #0X8020
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

SEIS_1      ; Carga el valor 6 en el display 1
            MOV     R0, #0X8000
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

SIETE_1     ; Carga el valor 7 en el display 1
            MOV     R0, #0X1038
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

OCHO_1      ; Carga el valor 8 en el display 1
            MOV     R0, #0X00
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal

NUEVE_1     ; Carga el valor 9 en el display 1
            MOV     R0, #0X20
            MOV     R6, #0X8000
            MOV     R8, #0
            B       LOOP            ; Vuelve al bucle principal
			
DELAY_MS    ; Función para generar un retardo en milisegundos

DELAY_02    ; Inicializa el contador de tiempo con el valor predefinido (0x3E80)
            MOV     R4, #0x3E80    ; Inicializa el contador de tiempo con el valor predefinido

DELAY_01    ; Bucle para realizar el retardo

            SUB     R4, #0x01      ; Decrementa el contador de tiempo en 1
            CMP     R4, #0x00      ; Compara el contador de tiempo con cero
            BNE     DELAY_01       ; Si el contador no ha llegado a cero, continúa el bucle
            SUB     R3, #0x01      ; Decrementa el contador de repeticiones en 1
            CMP     R3, #0x00      ; Compara el contador de repeticiones con cero
            BNE     DELAY_02       ; Si el contador no ha llegado a cero, vuelve a inicializar el contador de tiempo
            BX      LR             ; Retorna de la función de retardo


			ALIGN
			END
